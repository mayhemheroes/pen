<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Pen programming language</title><link>https://pen-lang.org/</link><description>Recent content on Pen programming language</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://pen-lang.org/index.xml" rel="self" type="application/rss+xml"/><item><title>Getting started</title><link>https://pen-lang.org/guides/getting-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pen-lang.org/guides/getting-started/</guid><description>Getting started Installing pen command See Install.
Creating a package To create your first package, run the following command.
pen create foo Then, you should see a foo directory under your current directory. When you switch to the foo directory, you should see a Main.pen source file and a pen.json package configuration file there.
Building a package To build the package, run the following command in the foo directory.
pen build Then, you will see an executable file named app in the directory.</description></item><item><title>Syntax</title><link>https://pen-lang.org/references/language/syntax/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pen-lang.org/references/language/syntax/</guid><description>Syntax Module A module consists of statements.
Statements Import statement See Modules.
Foreign import statement import foreign &amp;quot;c&amp;quot; foo \(number, number) number Record type definition See Records.
Type alias It gives another name to a given type.
type foo = number | none Function definition Followed by a function name, it declares its argument names and types in order and its result type. Bodies of functions are blocks. foo = \(x number, y number) number { x + y } Block It consists of 0 or more variable bindings and an expression.</description></item><item><title>Types</title><link>https://pen-lang.org/references/language/types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pen-lang.org/references/language/types/</guid><description>Types Number number Literals 3.14 -42 Boolean boolean Literals false true None none Literals none String string Literals &amp;quot;foo&amp;quot; Functions \(number, number) number Lists [a] Literals [number; 1, 2, 3] [myType; x, ...xs] Records type person { name string, age number, } Literals Fields are private outside modules where they are defined. Append a suffix of a field name to an expression of a record type to access its value.</description></item><item><title>Built-ins</title><link>https://pen-lang.org/references/language/built-ins/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pen-lang.org/references/language/built-ins/</guid><description>Built-ins Built-in types and functions that are accessible from any modules
Types error It is a special record type used for error handling.
type error { ... } Functions error It creates an error with its source information.
error \(any) error source It extracts source information from an error.
source \(error) any</description></item><item><title>Modules</title><link>https://pen-lang.org/references/language/modules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pen-lang.org/references/language/modules/</guid><description>Modules Overview Each source file composes a module. Modules contain their functions and types. They are exported to and imported from other modules. Exporting functions and types from a module Name functions and types in an upper camel case.
type Foo { ... } type Bar = ... Foo = \() number { ... } Importing functions and types from a module First, place an import statement to import a module at the top of a module you want to import them into.</description></item><item><title>Packages</title><link>https://pen-lang.org/references/language/packages/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pen-lang.org/references/language/packages/</guid><description>Packages Overview Each repository of a version control system (VCS) or directory with a package configuration file on a file system composes a package. Currently, only Git is supported as a VCS. A package contains multiple modules. Packages are either application or library packages. Packages are considered to be of applications if they have Main.pen files at their top directories. Otherwise, they are library ones. Modules in library packages can be imported from other packages.</description></item><item><title>Any</title><link>https://pen-lang.org/examples/types/any/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pen-lang.org/examples/types/any/</guid><description>Any Background () Given a file named &amp;ldquo;pen.json&amp;rdquo; with:
{ &amp;quot;dependencies&amp;quot;: {} } Use an any type Given a file named &amp;ldquo;Foo.pen&amp;rdquo; with:
f = \() any { 42 } When I run pen build
Then the exit status should be 0.
Downcast an any type Given a file named &amp;ldquo;Foo.pen&amp;rdquo; with:
f = \(x any) number { if x = x; number { x } else { 0 } } When I run pen build</description></item><item><title>Block</title><link>https://pen-lang.org/examples/syntax/block/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pen-lang.org/examples/syntax/block/</guid><description>Block Background () Given a file named &amp;ldquo;pen.json&amp;rdquo; with:
{ &amp;quot;dependencies&amp;quot;: {} } Define a variable Given a file named &amp;ldquo;Foo.pen&amp;rdquo; with:
f = \(x number) number { y = x y } When I run pen build
Then the exit status should be 0.
Call a function Given a file named &amp;ldquo;Foo.pen&amp;rdquo; with:
f = \() none { none } g = \() none { f() none } When I run pen build</description></item><item><title>Boolean</title><link>https://pen-lang.org/examples/types/boolean/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pen-lang.org/examples/types/boolean/</guid><description>Boolean Background () Given a file named &amp;ldquo;pen.json&amp;rdquo; with:
{ &amp;quot;dependencies&amp;quot;: {} } Use boolean literals Given a file named &amp;ldquo;Foo.pen&amp;rdquo; with:
f = \() boolean { true } g = \() boolean { false } When I run pen build
Then the exit status should be 0.
Use an and operation Given a file named &amp;ldquo;Foo.pen&amp;rdquo; with:
f = \() boolean { true &amp;amp; false } When I run pen build</description></item><item><title>Building packages</title><link>https://pen-lang.org/examples/commands/build/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pen-lang.org/examples/commands/build/</guid><description>Building packages Build an application package Given a file named &amp;ldquo;pen.json&amp;rdquo; with:
{ &amp;quot;dependencies&amp;quot;: { &amp;quot;System&amp;quot;: &amp;quot;file://pen-root/lib/os&amp;quot; } } And a file named &amp;ldquo;Main.pen&amp;rdquo; with:
import System'Os main = \(os Os'Os) number { 0 } When I successfully run pen build
Then I successfully run ./app.
Build a library package Given a file named &amp;ldquo;pen.json&amp;rdquo; with:
{ &amp;quot;dependencies&amp;quot;: {} } And a file named &amp;ldquo;Foo.pen&amp;rdquo; with:
f = \(x number) number { x } When I run pen build</description></item><item><title>Command line tools</title><link>https://pen-lang.org/references/command-line-tools/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pen-lang.org/references/command-line-tools/</guid><description>Command line tools The pen command has the following sub-commands.
For more information, see help by running pen --help.
create command It creates a package of a given kind in a specified directory.
Creating an application package pen create foo Creating a library package pen create --library foo build command It builds a package in a current directory.
pen build</description></item><item><title>Core</title><link>https://pen-lang.org/examples/libraries/core/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pen-lang.org/examples/libraries/core/</guid><description>Core Background () Given a file named &amp;ldquo;pen.json&amp;rdquo; with:
{ &amp;quot;dependencies&amp;quot;: { &amp;quot;Core&amp;quot;: &amp;quot;file://pen-root/lib/core&amp;quot; } } Convert a number to a string Given a file named &amp;ldquo;Foo.pen&amp;rdquo; with:
import Core'Number f = \() string { Number'String(42) } When I run pen build
Then the exit status should be 0.
Join strings Given a file named &amp;ldquo;Foo.pen&amp;rdquo; with:
import Core'String f = \() string { String'Join([string; &amp;quot;hello&amp;quot;, &amp;quot;world&amp;quot;]) } When I run pen build</description></item><item><title>Creating packages</title><link>https://pen-lang.org/examples/commands/create/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pen-lang.org/examples/commands/create/</guid><description>Creating packages Create an application package Given I successfully run pen create foo
And I cd to &amp;ldquo;foo&amp;rdquo;
When I successfully run pen build
Then I successfully run ./app.
Create a library package Given I successfully run pen create --library foo
And I cd to &amp;ldquo;foo&amp;rdquo;
When I run pen build
Then the exit status should be 0.
Create an application package in a current directory Given I successfully run pen create .</description></item><item><title>Error</title><link>https://pen-lang.org/examples/types/error/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pen-lang.org/examples/types/error/</guid><description>Error Background () Given a file named &amp;ldquo;pen.json&amp;rdquo; with:
{ &amp;quot;dependencies&amp;quot;: {} } Call a error function Given a file named &amp;ldquo;Foo.pen&amp;rdquo; with:
f = \() error { error(none) } When I run pen build
Then the exit status should be 0.
Call a source function Given a file named &amp;ldquo;Foo.pen&amp;rdquo; with:
f = \(e error) any { source(e) } When I run pen build
Then the exit status should be 0.</description></item><item><title>FFI</title><link>https://pen-lang.org/examples/ffi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pen-lang.org/examples/ffi/</guid><description>FFI Background () Given a file named &amp;ldquo;pen.json&amp;rdquo; with:
{ &amp;quot;dependencies&amp;quot;: {} } Import a foreign function of native calling convention Given a file named &amp;ldquo;Foo.pen&amp;rdquo; with:
import foreign g \(number) number f = \(x number) number { g(x) } When I run pen build
Then the exit status should be 0.
Import a foreign function of C calling convention Given a file named &amp;ldquo;Foo.pen&amp;rdquo; with:
import foreign &amp;quot;c&amp;quot; g \(number) number f = \(x number) number { g(x) } When I run pen build</description></item><item><title>Function</title><link>https://pen-lang.org/examples/types/function/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pen-lang.org/examples/types/function/</guid><description>Function Background () Given a file named &amp;ldquo;pen.json&amp;rdquo; with:
{ &amp;quot;dependencies&amp;quot;: {} } Define a function Given a file named &amp;ldquo;Foo.pen&amp;rdquo; with:
f = \(x number) number { x } When I run pen build
Then the exit status should be 0.
Call a function with no argument Given a file named &amp;ldquo;Foo.pen&amp;rdquo; with:
f = \() number { f() } When I run pen build
Then the exit status should be 0.</description></item><item><title>Install</title><link>https://pen-lang.org/guides/install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pen-lang.org/guides/install/</guid><description>Install Requirements Pen requires the following software on your system.
cargo, the Rust package manager git, the Git version control system ninja, the Ninja build system clang, the LLVM-based C compiler LLVM, the LLVM compiler infrastructure Both the library and tools On Ubuntu Run the following commands in your terminal to install the required software. Note that we need to install LLVM from the external repository to get the specific version of it.</description></item><item><title>List</title><link>https://pen-lang.org/examples/types/list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pen-lang.org/examples/types/list/</guid><description>List Background () Given a file named &amp;ldquo;pen.json&amp;rdquo; with:
{ &amp;quot;dependencies&amp;quot;: {} } Create an empty list Given a file named &amp;ldquo;Foo.pen&amp;rdquo; with:
f = \() [number] { [number;] } When I run pen build
Then the exit status should be 0.
Create a list with an element Given a file named &amp;ldquo;Foo.pen&amp;rdquo; with:
f = \() [number] { [number; 1] } When I run pen build
Then the exit status should be 0.</description></item><item><title>Modules</title><link>https://pen-lang.org/examples/module/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pen-lang.org/examples/module/</guid><description>Modules Background () Given a file named &amp;ldquo;pen.json&amp;rdquo; with:
{ &amp;quot;dependencies&amp;quot;: {} } Import a function from a module Given a file named &amp;ldquo;Foo.pen&amp;rdquo; with:
Foo = \() number { 42 } And a file named &amp;ldquo;Bar.pen&amp;rdquo; with:
import 'Foo Bar = \() number { Foo'Foo() } When I run pen build
Then the exit status should be 0.
Import a type alias from a module Given a file named &amp;ldquo;Foo.</description></item><item><title>Naming convention</title><link>https://pen-lang.org/guides/naming-convention/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pen-lang.org/guides/naming-convention/</guid><description>Naming convention Kind Case style Examples Variables Camel case fooBar, FooBar, i, x Functions Camel case fooBar, FooBar, f, g Types Camel case fooBar, FooBar Modules Upper camel case FooBar Module directories Upper camel case FooBar Packages Kebab case github.com/foo-bar/baz-blah Global and local names Use descriptive names for top-level functions and types.</description></item><item><title>None</title><link>https://pen-lang.org/examples/types/none/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pen-lang.org/examples/types/none/</guid><description>None Background () Given a file named &amp;ldquo;pen.json&amp;rdquo; with:
{ &amp;quot;dependencies&amp;quot;: {} } Use a none literal Given a file named &amp;ldquo;Foo.pen&amp;rdquo; with:
f = \() none { none } When I run pen build
Then the exit status should be 0.</description></item><item><title>Number</title><link>https://pen-lang.org/examples/types/number/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pen-lang.org/examples/types/number/</guid><description>Number Background () Given a file named &amp;ldquo;pen.json&amp;rdquo; with:
{ &amp;quot;dependencies&amp;quot;: {} } Use a number literal Given a file named &amp;ldquo;Foo.pen&amp;rdquo; with:
f = \() number { 42 } When I run pen build
Then the exit status should be 0.
Use arithmetic operators Given a file named &amp;ldquo;Foo.pen&amp;rdquo; with:
f = \() number { 1 + 2 - 3 * 4 / 5 } When I run pen build</description></item><item><title>Packages</title><link>https://pen-lang.org/examples/package/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pen-lang.org/examples/package/</guid><description>Packages Background () Given a file named &amp;ldquo;foo/pen.json&amp;rdquo; with:
{ &amp;quot;dependencies&amp;quot;: {} } And a file named &amp;ldquo;foo/Foo.pen&amp;rdquo; with:
Foo = \() number { 42 } And a file named &amp;ldquo;foo/Foo/Foo.pen&amp;rdquo; with:
Foo = \() number { 42 } And a directory named &amp;ldquo;bar&amp;rdquo;
And I cd to &amp;ldquo;bar&amp;rdquo;
And a file named &amp;ldquo;pen.json&amp;rdquo; with:
{ &amp;quot;dependencies&amp;quot;: { &amp;quot;Foo&amp;quot;: &amp;quot;file+relative:../foo&amp;quot; } } Import a function from a module Given a file named &amp;ldquo;Bar.</description></item><item><title>Polymorphism</title><link>https://pen-lang.org/examples/types/polymorphism/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pen-lang.org/examples/types/polymorphism/</guid><description>Polymorphism Background () Given a file named &amp;ldquo;pen.json&amp;rdquo; with:
{ &amp;quot;dependencies&amp;quot;: {} } Use an equal operator Given a file named &amp;ldquo;Foo.pen&amp;rdquo; with:
f = \() boolean { 0 == 0 } When I run pen build
Then the exit status should be 0.
Use a not-equal operator Given a file named &amp;ldquo;Foo.pen&amp;rdquo; with:
f = \() boolean { 0 != 0 } When I run pen build
Then the exit status should be 0.</description></item><item><title>Record</title><link>https://pen-lang.org/examples/types/record/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pen-lang.org/examples/types/record/</guid><description>Record Background () Given a file named &amp;ldquo;pen.json&amp;rdquo; with:
{ &amp;quot;dependencies&amp;quot;: {} } Create a record with an element Given a file named &amp;ldquo;Foo.pen&amp;rdquo; with:
type r { x number, } f = \() r { r{x: 42} } When I run pen build
Then the exit status should be 0.
Create a record with two elements Given a file named &amp;ldquo;Foo.pen&amp;rdquo; with:
type r { x number, y none, } f = \() r { r{x: 42, y: none} } When I run pen build</description></item><item><title>String</title><link>https://pen-lang.org/examples/types/string/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pen-lang.org/examples/types/string/</guid><description>String Background () Given a file named &amp;ldquo;pen.json&amp;rdquo; with:
{ &amp;quot;dependencies&amp;quot;: {} } Use a string literal Given a file named &amp;ldquo;Foo.pen&amp;rdquo; with:
f = \() string { &amp;quot;foo&amp;quot; } When I run pen build
Then the exit status should be 0.
Use equality operators Given a file named &amp;ldquo;Foo.pen&amp;rdquo; with:
f = \() boolean { &amp;quot;&amp;quot; == &amp;quot;&amp;quot; } g = \() boolean { &amp;quot;&amp;quot; != &amp;quot;&amp;quot; } When I run pen build</description></item><item><title>Union</title><link>https://pen-lang.org/examples/types/union/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pen-lang.org/examples/types/union/</guid><description>Union Background () Given a file named &amp;ldquo;pen.json&amp;rdquo; with:
{ &amp;quot;dependencies&amp;quot;: {} } Use a union type Given a file named &amp;ldquo;Foo.pen&amp;rdquo; with:
f = \() number | none { 42 } When I run pen build
Then the exit status should be 0.
Downcast a union type Given a file named &amp;ldquo;Foo.pen&amp;rdquo; with:
f = \(x number | none) number { if x = x; number { x } else if none { 0 } } When I run pen build</description></item></channel></rss>