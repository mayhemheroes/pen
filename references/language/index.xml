<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Language on Pen programming language</title><link>https://pen-lang.org/references/language/</link><description>Recent content in Language on Pen programming language</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://pen-lang.org/references/language/index.xml" rel="self" type="application/rss+xml"/><item><title>Syntax</title><link>https://pen-lang.org/references/language/syntax/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pen-lang.org/references/language/syntax/</guid><description>Syntax Module A module consists of statements.
Statements Import statement See Modules.
Foreign import statement import foreign &amp;quot;c&amp;quot; foo \(number, number) number Record type definition See Records.
Type alias It gives another name to a given type.
type foo = number | none Function definition Followed by a function name, it declares its argument names and types in order and its result type. Bodies of functions are blocks. foo = \(x number, y number) number { x + y } Block It consists of 0 or more variable bindings and an expression.</description></item><item><title>Types</title><link>https://pen-lang.org/references/language/types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pen-lang.org/references/language/types/</guid><description>Types Number number Literals 3.14 -42 Boolean boolean Literals false true None none Literals none String string Literals &amp;quot;foo&amp;quot; Functions \(number, number) number Lists [a] Literals [number; 1, 2, 3] [myType; x, ...xs] Records type person { name string, age number, } Literals Fields are private outside modules where they are defined. Append a suffix of a field name to an expression of a record type to access its value.</description></item><item><title>Built-ins</title><link>https://pen-lang.org/references/language/built-ins/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pen-lang.org/references/language/built-ins/</guid><description>Built-ins Built-in types and functions that are accessible from any modules
Types error It is a special record type used for error handling.
type error { ... } Functions error It creates an error with its source information.
error \(any) error source It extracts source information from an error.
source \(error) any</description></item><item><title>Modules</title><link>https://pen-lang.org/references/language/modules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pen-lang.org/references/language/modules/</guid><description>Modules Overview Each source file composes a module. Modules contain their functions and types. They are exported to and imported from other modules. Exporting functions and types from a module Name functions and types in an upper camel case.
type Foo { ... } type Bar = ... Foo = \() number { ... } Importing functions and types from a module First, place an import statement to import a module at the top of a module you want to import them into.</description></item><item><title>Packages</title><link>https://pen-lang.org/references/language/packages/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pen-lang.org/references/language/packages/</guid><description>Packages Overview Each repository of a version control system (VCS) or directory with a package configuration file on a file system composes a package. Currently, only Git is supported as a VCS. A package contains multiple modules. Packages are either application or library packages. Packages are considered to be of applications if they have Main.pen files at their top directories. Otherwise, they are library ones. Modules in library packages can be imported from other packages.</description></item></channel></rss>