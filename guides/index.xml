<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Guides on Pen programming language</title><link>https://pen-lang.org/guides/</link><description>Recent content in Guides on Pen programming language</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://pen-lang.org/guides/index.xml" rel="self" type="application/rss+xml"/><item><title>Getting started</title><link>https://pen-lang.org/guides/getting-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pen-lang.org/guides/getting-started/</guid><description>Getting started Installing pen command See Install.
Creating a package To create your first package, run the following command.
pen create foo Then, you should see a foo directory under your current directory. When you switch to the foo directory, you should see a Main.pen source file and a pen.json package configuration file there.
Building a package To build the package, run the following command in the foo directory.
pen build Then, you will see an executable file named app in the directory.</description></item><item><title>Install</title><link>https://pen-lang.org/guides/install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pen-lang.org/guides/install/</guid><description>Install Requirements Pen requires the following software on your system.
cargo, the Rust package manager git, the Git version control system ninja, the Ninja build system clang, the LLVM-based C compiler LLVM, the LLVM compiler infrastructure Both the library and tools On Ubuntu Run the following commands in your terminal to install the required software. Note that we need to install LLVM from the external repository to get the specific version of it.</description></item><item><title>Naming convention</title><link>https://pen-lang.org/guides/naming-convention/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pen-lang.org/guides/naming-convention/</guid><description>Naming convention Kind Case style Examples Variables Camel case fooBar, FooBar, i, x Functions Camel case fooBar, FooBar, f, g Types Camel case fooBar, FooBar Modules Upper camel case FooBar Module directories Upper camel case FooBar Packages Kebab case github.com/foo-bar/baz-blah Global and local names Use descriptive names for top-level functions and types.</description></item></channel></rss>